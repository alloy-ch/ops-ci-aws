---

- name: 'check the common variables'
  include_tasks: '{{ role_path }}/../../tasks/validate_common_vars.yml'

- name: "check manadatory param 'acm_region'"
  fail:
    msg: "missing var 'acm_region'"
  when: acm_region is not defined or acm_region == ''

- name: "check manadatory param 'route53_region'"
  fail:
    msg: "missing var 'route53_region'"
  when: route53_region is not defined or route53_region == ''

- name: "default 'domain_name' to 'base_domain' if needed"
  set_fact:
    domain_name: '{{ base_domain }}'
  when: domain_name is not defined or domain_name == ''

- name: "check if either 'domain_name' or 'base_domain' is set"
  fail:
    msg: "missing var 'domain_name'"
  when: domain_name is not defined or domain_name == ''

- name: 'set display name for single-domain certificate'
  set_fact:
    target_domain_display_name: '{{ domain_name }}'
    target_domain_name: '{{ domain_name }}'
  when: not ( is_wildcard | default(true) | bool )

- name: "set display name for wildcard certificate, and adjust 'domain_name' for wildcard certificate"
  set_fact:
    target_domain_display_name: 'star-{{ domain_name }}'
    target_domain_name: '*.{{ domain_name }}'
  when: is_wildcard | default(true) | bool

- name: 'check if there already exists an ACM certificate for {{ target_domain_name }}'
  command: >-
    aws --region {{ acm_region }} acm list-certificates \
      --query 'CertificateSummaryList[?DomainName==`{{ target_domain_name }}`].[CertificateArn]'  \
      --output text
  register: result

- set_fact:
    acm_should_be_created: "{{ 'arn:aws:acm:' not in result.stdout }}"
    acm_arn: '{{ result.stdout }}'

- when: acm_should_be_created
  name: 'create ACM certificate'
  command: >-
    aws --region {{ acm_region }} acm request-certificate  \
      --domain-name "{{ target_domain_name }}"  \
      --validation-method DNS  \
      --tags Key=Name,Value='{{ env }}-cert-{{ target_domain_display_name }}'  \
             Key=Project,Value='{{ project_id }}'  \
             Key=Environment,Value='{{ env }}'  \
             Key=Repository,Value='{{ git_info.repo_name }}'  \
             Key=Version,Value='v{{ project_version }}'  \
      --output text
  register: result

- when: acm_should_be_created
  set_fact:
    acm_arn: '{{ result.stdout }}'

- name: 'check if certificate is validated'
  command: >-
    aws --region {{ acm_region }} acm describe-certificate  \
      --certificate-arn {{ acm_arn }}  \
      --query 'Certificate.DomainValidationOptions[0].ValidationStatus'  \
      --output text
  register: result
  failed_when: "'PENDING_VALIDATION' not in result.stdout and 'SUCCESS' not in result.stdout"

- name: 'validate if needed'
  when: result.stdout == 'PENDING_VALIDATION'
  include_tasks: 'validation.yml'
