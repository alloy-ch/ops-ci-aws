---

AWSTemplateFormatVersion: 2010-09-09
Description: 'RC+/DevOps - ECR for {{ ecr_repository_name }} (v{{ project_version }})'


Resources:

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: '{{ ecr_repository_name }}'
      LifecyclePolicy:
        # NOTE-zw:
        # (I) the lovely AWS makes inconsistency between such a short distance. Here the `LifecyclePolicyText`
        # is literally a text (of type String), while several lines down there, the `RepositoryPolicyText` is a
        # JsonObject, therefore we could use the YAML representation...
        # (II) we do not need to keep all tagged images forever, but to specify the amount of tagged images to keep,
        # we have to set `tagStatus` to `tagged`. This makes another property `tagPrefixList` mandatory. And the
        # `tagPrefixList` does not accept wildcard or empty value...the policies are applied sequentially one by one
        # and no way to combine them with logical expression. So our workaround is to make the policies for the
        # logic (order by priority, policy with smaller number will be applied earlier):
        #   1. delete all untagged images older than 7 days
        #   2. keep only 10 fresh but untagged images
        #   3. for all images (irrelevant from the tagging status), we keep only 20 in total
        # Therefore, at anytime, we may have 0~10 untagged images, and 0~20 tagged images. A gaussian random simulation
        # of 10E4 times, 69% cases we ended up at 11 tagged images.
        # (III) at AWS, a junior secondary receptionist summer internship trainee is allowed to develop features and
        # ship to production without code review
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Expire old untagged images after one week",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countNumber": 7,
                  "countUnit": "days"
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "description": "Keep only 10 most recent untagged images",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 50,
                "description": "Keep only 20 images in total",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 20
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
#{% if share_with_org_unit is defined and share_with_org_unit != '' %}
#
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowPullFromAccountsInOU'
            Effect: 'Allow'
            Principal: '*'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:DescribeImages'
              - 'ecr:DescribeRepositories'
            Condition:
              ForAnyValue:StringLike:
                aws:PrincipalOrgPaths:
                  - '{{ share_with_org_unit }}'
#{% endif %}
#
      Tags:
        - { Key: 'Name', Value: '{{ ecr_repository_name }}-ecr' }
        - { Key: 'Project', Value: '{{ project_id }}' }
        - { Key: 'Environment', Value: '{{ env }}' }
        - { Key: 'Version', Value: 'v{{ project_version }}' }
        - { Key: 'Repository', Value: '{{ git_info.repo_name }}' }


Outputs:

  EcrRepositoryName:
    Description: 'Name of the repository in ECR'
    Value: !Ref EcrRepository

  EcrRepositoryUrl:
    Description: 'URL of the container repository'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}'
