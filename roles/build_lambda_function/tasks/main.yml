---
- name: 'check the common variables'
  include_tasks: '{{ role_path }}/../../tasks/validate_common_vars.yml'

- name: 'get the absolute path of source dir'
  set_fact:
    source_dir: '{{ (playbook_dir, "../app") | path_join | realpath }}'
  when: source_path is not defined or source_path == ''

- name: 'get default source dir if not specified'
  set_fact:
    source_dir: '{{ source_path | realpath }}'
  when: source_path is defined and source_path != ''

- name: 'check if package.json exists'
  stat:
    path: '{{ source_dir }}/package.json'
  register: r_stat
  changed_when: False
  failed_when: not r_stat.stat.exists
  no_log: true

- name: 'check if package-lock.json exists'
  stat:
    path: '{{ source_dir }}/package-lock.json'
  register: r_stat
  changed_when: False
  failed_when: not r_stat.stat.exists
  no_log: true

- name: 'gather Ansible facts'
  # we need only the current time with millisecond precision, but Ansible does not offer an option to specify, we have to get all
  gather_facts: {}

- name: 'compute the output dir path'
  set_fact:
    output_dir: '{{ workspace_path }}/lambda_{{ ansible_date_time.iso8601_micro| hash("md5") }}'
    intermediate_dir: '{{ workspace_path }}/lambda_{{ ansible_date_time.iso8601_micro| hash("md5") }}.tmp'

- name: 'create the intermediate dir'
  file:
    path: '{{ intermediate_dir }}'
    state: 'directory'
  changed_when: False

- name: 'delete the output dir to absolutely clear the content'
  file:
    path: '{{ output_dir }}'
    state: 'absent'
  changed_when: False

- name: 'create the output dir'
  file:
    path: '{{ output_dir }}'
    state: 'directory'
  changed_when: False

- name: 'prepare the source files for the container'
  synchronize:
    src: '{{ source_dir }}/'
    dest: '{{ intermediate_dir }}'
    copy_links: 'yes'
    recursive: 'yes'
    delete: 'yes'
    rsync_opts:
      - '--exclude=coverage'
      - '--exclude=dist'
      - '--exclude=node_modules'
      - '--exclude=venv'
  no_log: '{{ ansible_verbosity < 3 }}'

- name: 'place the shell script to be executed inside the container'
  copy:
    src: '{{ role_path }}/files/docker_build_typescript.sh'
    dest: '{{ intermediate_dir }}/docker_build_typescript.sh'
    mode: 0755

- name: 'build the app inside lambda runtime container'
  command: >
    docker run --rm
      -v "{{ output_dir }}:/output"
      -v "{{ intermediate_dir }}:/workspace"
      -v "~/.npmrc:/root/.npmrc"
      --entrypoint "/workspace/docker_build_typescript.sh"
      {{ lambda_runtime_docker_image_nodejs }}

- name: 'retrieve the tarball path'
  # [NOTE-zw] It is hard to believe that npm --as one of the few must-have tool for any node.js developer-- can be so buggy. So many
  # edge cases are not covered, and so many well-known workarounds gradually become the "standard" and best practices...
  #
  # With npm 8, `npm pack` does not respect the silence settings (https://github.com/npm/cli/issues/4121). Therefore, when we pipe the
  # stdout of `npm pack` from within the container, it produces an invalid JSON file, e.g.
  #    ```
  #    > lambda-function-errors@1.0.0 build
  #    > npx tsc
  #
  #    [
  #      {
  #        "id": "lambda-function-errors@1.0.0",
  #        ...
  #    ```
  # We use regex to clean up the non-JSON part before piping to `jq`
  #
  # Then npm has another bug in all 6.x - 8.x versions (https://github.com/npm/cli/issues/3405)
  # It produces wrong filename in the json output of `npm pack` for scoped npm package, here we apply a workaround to do the same
  # search/replace as in https://github.com/npm/cli/blob/668ec7f33b7a76f5e86a59f7e5a6c0e068a242b1/lib/commands/pack.js#L59
  shell:
    cmd: cat npm-pack-output.json | tr "\n" "\f" | grep -o "[\[{].*"  | tr "\f" "\n" | jq -crM ".[].filename" | sed 's/^@//' | sed 's/\//-/'
    chdir: '{{ intermediate_dir }}'
  register: r_tarball
  changed_when: False
  failed_when: r_tarball.stdout == '' or r_tarball.stdout == 'null'

- name: 'unpack to the destination'
  shell: tar -zxf {{ intermediate_dir }}/{{ r_tarball.stdout }} -C {{ output_dir }} --strip 1

- name: 'set output'
  set_fact:
    lambda_code_path: '{{ output_dir }}'
