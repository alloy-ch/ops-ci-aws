---

- name: 'get the absolute path of source dir'
  set_fact:
    source_dir: '{{ (playbook_dir, "../app") | path_join | realpath }}'
  when: source_path is not defined or source_path == ''

- name: 'get default source dir if not specified'
  set_fact:
    source_dir: '{{ source_path | realpath }}'
  when: source_path is defined and source_path != ''

- name: 'check if pyproject.toml exists'
  stat:
    path: '{{ source_dir }}/pyproject.toml'
  register: r_stat
  changed_when: False
  failed_when: not r_stat.stat.exists
  no_log: true

- name: 'detect package manager by checking for lock files'
  stat:
    path: '{{ source_dir }}/{{ item }}'
  register: lock_files
  loop:
    - 'uv.lock'
    - 'poetry.lock'

- name: 'determine package manager'
  set_fact:
    package_manager: '{{ "uv" if lock_files.results[0].stat.exists else "poetry" if lock_files.results[1].stat.exists else "none" }}'

- name: 'fail if no lock file found'
  fail:
    msg: 'Neither uv.lock nor poetry.lock found in {{ source_dir }}'
  when: package_manager == "none"

- name: 'check if the runtime group is in pyproject.toml (poetry)'
  shell: >
    cd "{{ source_dir }}"
    poetry show --only runtime
  register: r_poetry_show
  changed_when: False
  failed_when: r_poetry_show.rc != 0
  when: package_manager == "poetry"

- name: 'check if the runtime group exists in pyproject.toml (uv)'
  shell: >
    cd "{{ source_dir }}"
    grep -q "^\[dependency-groups\.runtime\]" pyproject.toml || grep -q "^\[tool\.uv\.groups\.runtime\]" pyproject.toml
  register: r_uv_runtime_check
  changed_when: False
  failed_when: r_uv_runtime_check.rc != 0
  when: package_manager == "uv"

- name: 'is pyproject.toml up-to-date?'
  when: lambda_layers_to_pin is defined and lambda_layers_to_pin | length > 0
  block:
    - name: 'create tmp folder'
      ansible.builtin.file:
        path: '{{ workspace_path }}/tmp'
        state: 'directory'
      changed_when: False
    - name: 'copy update_project.sh to tmp dir and make it executable'
      ansible.builtin.copy:
        src: '{{ role_path }}/files/update_project.sh'
        dest: '{{ workspace_path }}/tmp/update_project.sh'
        mode: 'u+x'
    - name: 'update pyproject.toml'
      ansible.builtin.shell: '{{ workspace_path }}/tmp/update_project.sh "{{ update_non_pinned_deps | lower }}" "{{ lambda_layers_to_pin | join(" ") }}" "{{ package_manager }}"'
      args:
        chdir: '{{ source_dir }}'
    - name: 'fail if lock file has changed in git (allow just comments to change)'
      shell: |
        cd "{{ source_dir }}"
        {% if package_manager == "poetry" %}
        git diff --exit-code -G'^[^#]' poetry.lock
        {% elif package_manager == "uv" %}
        git diff --exit-code -G'^[^#]' uv.lock
        {% endif %}
      register: r_git_diff
      failed_when: r_git_diff.rc != 0
      changed_when: False
      no_log: false

- name: 'gather Ansible facts'
  # we need only the current time with millisecond precision, but Ansible does not offer an option to specify, we have to get all
  gather_facts: {}

- name: 'compute the output dir path'
  set_fact:
    output_dir: '{{ workspace_path }}/lambda_{{ ansible_date_time.iso8601_micro| hash("md5") }}'
    intermediate_dir: '{{ workspace_path }}/lambda_{{ ansible_date_time.iso8601_micro| hash("md5") }}.tmp'

- name: 'create the intermediate dir'
  file:
    path: '{{ intermediate_dir }}'
    state: 'directory'
  changed_when: False

- name: 'delete the output dir to absolutely clear the content'
  file:
    path: '{{ output_dir }}'
    state: 'absent'
  changed_when: False

- name: 'create the output dir'
  file:
    path: '{{ output_dir }}'
    state: 'directory'
  changed_when: False

- name: 'prepare the source files for the container'
  ansible.posix.synchronize:
    src: '{{ source_dir }}/'
    dest: '{{ intermediate_dir }}'
    copy_links: yes
    recursive: yes
    delete: yes
    rsync_opts:
      - '--exclude=tests'
      - '--exclude=__pycache__'
      - '--exclude=.pytest_cache'
      - '--exclude=.coverage'
      - '--exclude=coverage'
      - '--exclude=dist'
      - '--exclude=.venv'
      - '--exclude=venv'
      - '--exclude=.mypy_cache'
  no_log: '{{ ansible_verbosity < 3 }}'

- name: 'place the shell script to be executed inside the container'
  copy:
    src: '{{ role_path }}/files/docker_build_python.sh'
    dest: '{{ intermediate_dir }}/docker_build_python.sh'
    mode: 0755

- name: 'pull the docker image for lambda runtime'
  command: >
    docker pull {{ lambda_runtime_docker_image_python }}

- name: 'get pyproject.toml groups'
  shell: >
    cd "{{ source_dir }}" && 
    if [ "{{ package_manager }}" = "poetry" ]; then
      cat pyproject.toml | grep -E '^\[tool\.poetry\.group\..*$' | sed -E 's/^\[tool\.poetry\.group\.(.*)[.\].*$/\1/' | sort | uniq
    else
      ( sed -n '/^\[dependency-groups\]/,/^\[/{//!p;}' pyproject.toml | grep -E '^[a-zA-Z][a-zA-Z0-9_-]*\s*=' | cut -d'=' -f1 | sed 's/[[:space:]]*$//' || true; 
        sed -n '/^\[tool\.uv\.groups\]/,/^\[/{//!p;}' pyproject.toml | grep -E '^[a-zA-Z][a-zA-Z0-9_-]*\s*=' | cut -d'=' -f1 | sed 's/[[:space:]]*$//' || true ) |
      sort | uniq
    fi
  register: r_available_groups

# Set unified group parameters with backward compatibility for Poetry parameters
- name: 'set unified groups_without parameter'
  set_fact:
    groups_without_resolved: '{{ poetry_without if poetry_without is defined else groups_without }}'

- name: 'set unified groups_with parameter'
  set_fact:
    groups_with_resolved: '{{ poetry_with if poetry_with is defined else groups_with }}'

- name: 'set unified groups_only parameter'
  set_fact:
    groups_only_resolved: '{{ poetry_only if poetry_only is defined else groups_only }}'

# Validate that specified groups exist in pyproject.toml
- name: 'intersect groups with available groups in pyproject.toml'
  set_fact:
    groups_without_final: '{{ groups_without_resolved | intersect(r_available_groups.stdout_lines) }}'
    groups_with_final: '{{ groups_with_resolved | intersect(r_available_groups.stdout_lines) }}'
    groups_only_final: '{{ groups_only_resolved | intersect(r_available_groups.stdout_lines) }}'

- name: 'build the app inside lambda runtime container'
  command: >
    docker run --rm
      -v "{{ output_dir }}:/output"
      -v "{{ intermediate_dir }}:/workspace"
      --entrypoint "/workspace/docker_build_python.sh"
      {{ lambda_runtime_docker_image_python }}
      {% if strict %}--strict{% endif %}
      {% if packages is defined and packages | length > 0 %}--packages {{ packages | join(',') }}{% endif %}
      {% if groups_only_final is defined and groups_only_final | length > 0 %}--only {{ groups_only_final | join(',') }}{% endif %}
      {% if groups_without_final is defined and groups_without_final | length > 0 %}--without {{ groups_without_final | join(',') }}{% endif %}
      {% if groups_with_final is defined and groups_with_final | length > 0 %}--with {{ groups_with_final | join(',') }}{% endif %}

- name: 'set output'
  set_fact:
    lambda_code_path: '{{ output_dir }}'
