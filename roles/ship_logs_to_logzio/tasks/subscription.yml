---
- name: '[logzio-subscription] get the log group'
  shell: |
    aws --region {{ aws_region }} logs describe-log-groups --max-items 100000 --log-group-name-prefix {{ logzio_log_group_to_monitor }} --query "logGroups[?logGroupName=='{{ logzio_log_group_to_monitor }}'].logGroupName" | jq -crM '.[]'
  register: r_log_groups

- name: '[logzio-subscription] create the log group if it does not exist'
  when: r_log_groups.stdout_lines | length == 0
  block:
    - name: '[logzio-subscription] create the log group'
      # The log group belongs to the application, we use the tags set from the Ansible play being executed (which is deploying the application)
      command: |
        aws --region {{ aws_region }} logs create-log-group --log-group-name {{ logzio_log_group_to_monitor }} \
          --tags Name="{{ logzio_log_group_to_monitor }}",Project="{{ project_id }}",Environment="{{ env }}",Repository="{{ git_info.repo_name }}",Version="v{{ project_version }}"
    - name: '[logzio-subscription] set the retention policy'
      command: |
        aws --region {{ aws_region }} logs put-retention-policy --log-group-name {{ logzio_log_group_to_monitor }} --retention-in-days {{ default_log_group_retention_in_days }}

- name: '[logzio-subscription] get the lambda function arn'
  command: |
    aws --region {{ aws_region }} cloudformation list-exports \
      --max-items 100000 --output text --query 'Exports[?Name==`{{ logzio_lambda_name }}-lambda-arn`].Value'
  register: r_lambda_arn

- name: '[logzio-subscription] subscribe to the log group'
  command: |
    aws --region {{ aws_region }} logs put-subscription-filter \
      --log-group-name "{{ logzio_log_group_to_monitor }}" \
      --filter-name "UnfilteredEvents" \
      --filter-pattern "" \
      --destination-arn "{{ r_lambda_arn.stdout }}"
