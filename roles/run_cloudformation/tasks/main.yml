---

- name: '[{{ stack_name }}] copy and template out CloudFormation'
  # jinja2 templating
  template:
    src: '{{ template }}'
    dest: '{{ workspace_path }}/cloudformation.yml'
  no_log: '{{ ansible_verbosity < 3 }}'

#
# get the name of the correct S3 bucket
#
- name: '[{{ stack_name }}] retrieve the infrastructure S3 bucket name from deployed CloudFormation stacks'
  block:
    - name: '[{{ stack_name }}] get the CloudFormation stack outputs'
      ringier.aws_cicd.gather_stack_outputs:
        region: '{{ region }}'
        stack_name: "{{ (env + '-' + project_id + '-basis') if region != 'us-east-1' else (env + '-' + project_id + '-basis-us-east-1') }}"
      register: basis_stack
      no_log: true

    - name: '[{{ stack_name }}] find name of the correct S3 bucket'
      set_fact:
        deployment_bucket: '{{ basis_stack.outputs.InfrastructureCodeS3Bucket }}'
        parameter_overrides: ''  # clear existing parameter_overrides
  when: infrastructure_bucket_override == ''

- name: '[{{ stack_name }}] take the infrastructure S3 bucket name directly from infrastructure_bucket_override'
  set_fact:
    deployment_bucket: '{{ infrastructure_bucket_override }}'
    parameter_overrides: ''  # clear existing parameter_overrides
  when: infrastructure_bucket_override != ''

#
# build parameter_overrides string
#
- name: '[{{ stack_name }}] build parameter_overrides'
  set_fact:
    parameter_overrides: '{{parameter_overrides}} {{ item.key }}="{{ item.value }}"'
  with_items: '{{ template_parameters | default({}) | dict2items }}'
  when: template_parameters is defined and template_parameters.keys()|length > 0
  no_log: '{{ ansible_verbosity < 3 }}'

- name: '[{{ stack_name }}] set parameter_overrides'
  set_fact:
    parameter_overrides: '--parameter-overrides {{ parameter_overrides }}'
  when: parameter_overrides is defined and parameter_overrides != ''
  no_log: '{{ ansible_verbosity < 3 }}'

#
# SAM processing, if relevant
#
- name: '[{{ stack_name }}] packing'
  command: >-
    aws cloudformation package
       --template-file {{ workspace_path }}/cloudformation.yml
       --output-template-file {{ workspace_path }}/cloudformation-final.yml
       --s3-bucket {{ deployment_bucket }}
       --s3-prefix {{ git_info.repo_name }}
       --region {{ region }}
  no_log: '{{ ansible_verbosity < 3 }}'

#
# finally, deploy
#
# deploy the regular way (blocking)
- name: '[{{ stack_name }}] apply stack updates'
  when: not async_deploy
  command: >-
    aws cloudformation deploy
      --template-file {{ workspace_path }}/cloudformation-final.yml
      --s3-bucket {{ deployment_bucket }}
      --s3-prefix {{ git_info.repo_name }}
      --stack-name {{ stack_name }}
      --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
      --region {{ region }}
      {{ parameter_overrides }}
      --tags
        Environment="{{ env }}"
        Name="{{ stack_name }}"
        Project="{{ project_id }}"
        Repository="{{ git_info.repo_name if repo_tag_override is not defined or repo_tag_override == '' else repo_tag_override }}"
        {{ ('' if skip_version_tag else 'Version="v' + project_version + '"') if version_tag_override is not defined or version_tag_override == '' else 'Version="' + version_tag_override + '"' }}
        {{ '' if skip_version_tag else 'GitBranch="' + git_info.branch_name + '"' }}
        {{ '' if skip_version_tag else 'GitCommit="' + git_info.commit_hash + '"' }}
        {{ '' if skip_version_tag else 'GitPendingChanges="' + git_info.has_pending_changes | string + '"' }}
      --no-fail-on-empty-changeset

# deploy the non-blocking way
- name: "[{{ stack_name }}] apply stack updates"
  when: async_deploy
  command: >-
    aws cloudformation deploy
      --template-file {{ workspace_path }}/cloudformation-final.yml
      --s3-bucket {{ deployment_bucket }}
      --s3-prefix {{ git_info.repo_name }}
      --stack-name {{ stack_name }}
      --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
      --region {{ region }}
      {{ parameter_overrides }}
      --tags
        Environment="{{ env }}"
        Name="{{ stack_name }}"
        Project="{{ project_id }}"
        Repository="{{ git_info.repo_name if repo_tag_override is not defined or repo_tag_override == '' else repo_tag_override }}"
        {{ ('' if skip_version_tag else 'Version="v' + project_version + '"') if version_tag_override is not defined or version_tag_override == '' else 'Version="' + version_tag_override + '"' }}
        {{ '' if skip_version_tag else 'GitBranch="' + git_info.branch_name + '"' }}
        {{ '' if skip_version_tag else 'GitCommit="' + git_info.commit_hash + '"' }}
        {{ '' if skip_version_tag else 'GitPendingChanges="' + git_info.has_pending_changes | string + '"' }}
      --no-fail-on-empty-changeset
  async: "{{ async_duration }}"
  poll: 0
  register: deploy_cf
